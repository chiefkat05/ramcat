#version 460 core

out vec4 FragColor;
in vec2 tex_position;
in float instancedOut;
in vec4 colorOffset;

uniform sampler2D tex;
uniform vec2 tex_offset;
uniform vec2 tex_scale;
uniform vec4 color;

in vec3 normals;
in vec3 fragPos;

const uint ltype_directional = 0;
const uint ltype_point = 1;
const uint ltype_spot = 2;
struct light
{
    int ltype;
    vec3 position;
    vec3 direction;

    vec3 color;

    float ambient;
    float diffuse;
    float specular;
};

const int light_limit = 24;
uniform int light_count;
uniform light lights[light_limit];
uniform vec3 camera_pos;

void main()
{
    if (color.a == 0.0)
        discard;
    if (instancedOut == 1.0 && colorOffset.w == 0.0)
        discard;

    vec3 finalResult = vec3(0.0);
    for (int i = 0; i < light_limit; ++i)
    {
        if (i >= light_count)
            break;

        vec3 inResult = vec3(0.0);

        vec3 norm = normalize(normals);
        vec3 light_dir;
        float diff;
        vec3 view_dir;
        vec3 reflect_dir;
        vec3 halfway_dir;

        inResult += lights[i].ambient;

        if (lights[i].ltype == 0)
        {
            light_dir = normalize(-lights[i].direction);
            diff = max(dot(norm, light_dir), 0.0);
            inResult += diff * lights[i].diffuse;

            view_dir = normalize(camera_pos - fragPos);
            reflect_dir = reflect(-light_dir, norm);
            halfway_dir = normalize(light_dir + view_dir);
            float spec = pow(max(dot(normals, halfway_dir), 0.0), 128);
            inResult += spec * lights[i].specular;
        }
        if (lights[i].ltype == 1)
        {
            light_dir = normalize(lights[i].position - fragPos);
            diff = max(dot(norm, light_dir), 0.0);
            inResult += diff * lights[i].diffuse;
            
            view_dir = normalize(camera_pos - fragPos);
            reflect_dir = reflect(-light_dir, norm);
            halfway_dir = normalize(light_dir + view_dir);
            float spec = pow(max(dot(normals, halfway_dir), 0.0), 128);
            inResult += spec * lights[i].specular;
        }
        if (lights[i].ltype == 2)
        {

        }

        finalResult += inResult * lights[i].color;
    }

    vec4 textureOutput = texture(tex, (tex_position + tex_offset) * tex_scale);
    if (textureOutput.w == 0.0)
        discard;

    if (instancedOut == 1.0)
    {
        textureOutput *= color * colorOffset;
    }
    if (instancedOut == 0.0)
    {
        textureOutput *= color;
    }

    vec4 result = textureOutput;
    result *= vec4(finalResult, 1.0);
    FragColor = result;
} 