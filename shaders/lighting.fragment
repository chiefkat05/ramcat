#version 460 core

out vec4 FragColor;
in vec2 tex_position;
in float instancedOut;
in vec4 colorOffset;

uniform sampler2D tex;
uniform vec2 tex_offset;
uniform vec2 tex_scale;
uniform vec4 color;

in vec3 normals;
in vec3 fragPos;

//const int light_limit = 24;
//uniform int light_count;
//uniform vec3 light_position[light_limit];
uniform vec3 light_pos;
uniform vec3 camera_pos;

void main()
{
    if (color.a == 0.0)
        discard;
    if (instancedOut == 1.0 && colorOffset.w == 0.0)
        discard;

    //for (int i = 0; i < light_limit; ++i)
    //{
    //    if (i >= light_count)
    //        break;

        //light calc
    //}

    //lighting test
    vec3 norm = normalize(normals);
    vec3 light_dir = normalize(light_pos - fragPos);
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffuse = diff * vec3(2.0);
    vec3 view_dir = normalize(camera_pos - fragPos);
    vec3 reflect_dir = reflect(-light_dir, norm);
    vec3 halfway_dir = normalize(light_dir + view_dir);
    float spec = pow(max(dot(normals, halfway_dir), 0.0), 128);
    vec3 specular = vec3(1.0) * spec;

    vec4 textureOutput = texture(tex, (tex_position + tex_offset) * tex_scale);
    if (textureOutput.w == 0.0)
        discard;

    if (instancedOut == 1.0)
    {
        textureOutput *= color * colorOffset;
    }
    if (instancedOut == 0.0)
    {
        textureOutput *= color;
    }
    vec4 result = vec4(textureOutput.xyz * 0.1, 1.0);
    result *= vec4(diffuse + specular, 1.0);
    FragColor = result;
} 